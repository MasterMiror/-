#操作系统课程学习笔记

##C1 操作系统呢概述

常用四大操作系统:Win Mac Linux Unix

###操作系统的基本功能

  提供操作界面

  控制程序运行

  管理系统资源

  配置系统参数

  监控系统状态

  工具软件集合

###操作系统的功能

  进程管理（CPU管理）[控制、调度、通信]

  内存管理[内存分配 内存共享 内存保护 虚拟内存]

  设备管理[设备的分配和调度 设备传输控制 设备驱动]

  文件管理[存储空间管理 文件的操作 目录的操作 文件和目录的存取权限管理]

##Def操作系统是一个大型系统程序，它负责给用户提供接口，方便用户控制计算机；负责为应用程序分配和调度软硬件资源，并且控制程序的并发活动，帮助用户存取和保护信息。

系统程序在层次上处于应用程序和硬件之间的部分。


###操作系统的发展历程

  电子管时代

  晶体管时代

  集成电路时代

  大规模集成电路时代

###操作系统发展的四个典型阶段

  手工操作（无操作系统阶段）

  单道批处理系统

  多道批处理系统

  分时系统

###分时技术

由于多道批处理系统存在作业处理时间长、交互能力差等等缺点，在60年代基于中断技术和通道技术的出现而发展出了分时操作系统
它的交互性更高、响应更加快速，也支持多用户多任务。主机采用分时技术轮流为每个使用串口线接入主机的终端提供服务，对于每个终端来说都认为自己是独占主机的。

###分时技术的概念

  主机以很短的时间片（50ms）为单位，把cpu轮流分配给每个终端使用，直到全部作业被运行完。由于时间片非常短，在终端数量不多的情况下，每个终端都能重新获得CPU，使得每个终端都能获得及时响应。

  等待周期==时间片x终端数量

  大型分时系统的一种时间Multics项目。

  Unix是第一个实用化的分时系统，它的创新之处在于其可移植性和硬件无关性。它引入了“特殊文件”这一概念，将外设看作一种文件对外设进行统一管理。


###操作系统的典型案例

*微机操作系统* CP/M MacOS DOS Windows

*实时操作系统* 火控 雷达 跟踪识别等等系统

*网络操作系统* 普通操作系统+网络通信+网络服务



=======================================================
#C2操作系统逻辑结构

##分层的操作系统

    资源分配与调度
        ｜｜
        ｜｜
      文件存取
        ｜｜
        ｜｜
      I/O处理
        ｜｜
        ｜｜
      存储管理
        ｜｜
        ｜｜
      进程管理
  初级中断管理/裸机/处理机分派

##分层的原则

硬件相关————最底层

外部特征————最外层

中间层————调用次序或消息传递顺序

共性的服务————较低层

活跃功能————较低层

分层的有点是:1结构清晰，避免循环调用；2.容易将问题局部化，系统的正确性容易保证；3.有利于系统的维护、扩充、移植。

##微内核结构

操作系统 == 微内核 + 核外服务器

微内核（足够小，提供OS最基本的核心功能和服务）

核外服务器 （能完成OS大部分的服务功能，等待App提出请求）

相关项目可以参考Linux和Minix


##操作系统的逻辑结构

CPU的态 即CPU的工作状态，对资源和权限使用指令的描述。

态可分为:核态（Kernel mode 可访问所有资源和执行所有指令）；用户态（User mode 仅可以访问部分资源，其他资源受限）；管态(Supervisor mode 介于核态和用户态之间)

用户态在以下四种情况发生时可向核态转换:

1.请求OS服务

2.中断发生

3.Error

4.企图执行特权指令

核态向用户态转移的情况一般是执行中断返回:IRET

硬件按“态”来区分CPU的咋混改

OS按“进程”来区分CPU的状态

##存储器

###存储器的分类:

1.按读写方式可分为RAM和ROM

2.按存储材料可分为半导体存储器、磁存储器、光存储器

3.按和CPU的联系可分为主存和辅存

一个理想的储存体系应该应对不同的存储需求有不同的成本和架构，它的大致要求是速度快、容量大、成本低


##CPU读取指令互数据时的访问顺序:

1.访问缓存

2.访问内存

3.访问辅存

##中断

###定义 中断即CPU对突发的外部事件的反应过程或者机制（CPU收到外部信号之后停止当前工作去处理外部事件，随后回到原来的中断点继续工作）

引入中断的目的在于实现并发、实现实时处理、实现故障的自动处理

引起中断的事件被称为中断源，中断分为强迫性中断和自愿中断。也可分为外中断和内中断，外中断由CPU外部事件引发，内中断相反；外中断又分为可屏蔽和不可屏蔽，依据是CPU是否可以不响应。

断点:即程序中断的地方 CS:IP

现场:程序正确运行所依赖的信息集合。

##中断响应的过程:

1.识别中断源

2.保护断点和现场

3.装入中断服务程序的入口地址（CS:IP）

4.装入中断服务程序

5.恢复现场和断点

6.中断返回:IRET

##中断响应的实质是交换指令执行地址和交换CPU的态


=======================================================

#C3 操作系统用户界面

##BIOS和主引导记录MBR

###实模式和保护模式

####实模式（REAL MODE）

程序按照8086寻址方法访问0h-FFFFFh（1MB）空间

寻址方式:物理寻址（20bit） = 段地址:偏移地址

例子:读取1M空间

前640K [00000-9FFFF]:基本内存

中128K [A0000-BFFFF]:显卡显存

末尾256K [C0000-FFFFF]:BIOS

C0000 -- C7FFF:显卡BIOS

C8000 - CBFFF:IDE控制器BIOS

F0000-FFFFF:最后64K 系统BIOS

CPU单任务运行

####保护模式（内存保护模式 PROTECT MODE）

寻址方式:段（32bit）和偏移量（32bit）寻址4GB空间

段页式寻址机制（段 页）

寻你地址，进程，封闭空间

应用承诺许和操作系统的运行环境都被保护

CPU支持多任务

###系统BIOS

####Basic I/O System(Frimware固件)

基本输入/输出系统

位置:F0000 - FFFFF

功能:

  系统启动配置

  基本的设备I/O服务

  系统的加电自检和启动

####CMOS设置 启动时按DEL就会进入CMOS设置，即使什么OS都没装也会进到这里

###MBR/硬盘分区/格式化


MBR ===> Windows FAT32/NTFS ===>Linux EXT2/EXT3/... ===>其他文件系统

分区启动扇叶 PBR

主启动扇叶:完成OS加载或者启动你难过管理功能

  提供菜单:让用户选择不同的启动项 实现多重启动

  加载核心文件:直接指向可启动区加载操作系统

  跳转:将启动管理功能转交给其他Loader

运行过程: POST->CMOS设置（硬盘启动）->读取MBR->控制权交给MBR

MBR读取分区表，找到其中的活动分区，确认其他分区都是不活动的，MBR读取互动分区中的第一个分区并将其加载到内存中。

PBR继续控制后续引导过程

###操作系统启动过程：初始引导==>核心初始化==>系统初始化

####初始引导 它的目的在于把OS核心装入内存并使之开始工作接管计算机系统

过程：加电 JUMP POST ==>BIOS中的启动程序运行 ==>引导程序运行==>OS内核逐步加载剩余OS部分，最后完全控制计算机

####核心初始化 它的目的在于初始化系统核心数据

它的典型工作又 各种寄存器的初始化；存储系统和页表的初始化；核心进程的构建

####系统初始化 它的目的在于为用户使用系统作准备 使系统处于待命状态

它的主要工作有 初始化文件管理系统 初始化网络系统 初始化控制台 初始化图形界面

例子 Windows的启动过程

POST 加电后BIOS启动主机自检程序

初始引导 BIOS从MBR读入引导程序，装入内存的特定位置； 引导程序启动DOS7.0调入操作系统核心；Windows开始接管系统

核心初始化 资源状态、核心数据等初始化

系统初始化 GUI界面生成，系统处于待命/消息接收状态

例子 LINUX系统启动状态

POST->MBR->KERNEL映像->KERNEL映像自解压并执行->内核初始化->内核启动


##操作系统的生成

操作系统的生成嫩难过是为了满足特定硬件环境和用户需要，组装和构建操作系统的过程。

操作系统生成的主要步骤，根据硬件环境/用户要求配置功能模块和狗仔参数

构建OS的映像

系统生成的前提有三：1.操作系统由可拆装模块构成；2有交互式配置工具；3.有映像构建工具

///本节课的实验是配置LINUX内核///

##操作系统的用户界面
Shell是操作系统与用户的交互界面 通过控制台执行命令的方式来进行交互，SHell本身不执行命令，仅仅是管理和组织

Shell脚本由Shell环境解释运行，需要用Chmod赋予可执行属性 x

一般执行使用bash

##系统调用

定义 操作系统内核为应用程序提供的服务/函数

特点 一般涉及核心资源或者硬件编号 每个系统调用具有唯一编号 调用过程产生中断 自愿中断

大体过程是应用程序执行过程中调用函数 产生中断，函数调用系统内核的X功能 随后恢复调用现场 应用继续执行
